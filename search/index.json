[{"content":" # Hi! Here\u0026rsquo;s this month\u0026rsquo;s \u0026ldquo;I made a\u0026rdquo; post! This time, I made a tool to quickly re-score your AniList library! It\u0026rsquo;s my first go at publishing a full web app, and I\u0026rsquo;m honestly pretty happy with how it turned out.\n# What does it do? It\u0026rsquo;s simple:\nYou log in with your AniList account You go to the list view, and select an item You edit the item directly, or go to the bulk editor to edit multiple items at once You save your changes Done! # How does it work? The app uses the AniList API to fetch your library data, and then sends the changes back to the API. It\u0026rsquo;s a pretty simple setup, but it\u0026rsquo;s been a great learning experience for me. Even if the code is i n c r e d i b l y messy. I\u0026rsquo;ll clean it up eventually, I promise.\nIf you really want to know the specifics, I used Bun, TypeScript, React, Vite, TailwindCSS, React Router, and shadcn/ui. Actually, I wanna say a HUGE thank you to the people behind shadcn/ui! It\u0026rsquo;s a great library, and it made my life so much easier.\n# Where can I find it? You can find the app at https://haiiro.moe/rescorer and the source code over on GitHub. The next minor release will include many fixes, including a mobile mode. For now, it\u0026rsquo;s desktop only. Sorry!\nThat\u0026rsquo;s all for now! I hope you enjoy the tool, and I\u0026rsquo;ll see you next month for another \u0026ldquo;I made a\u0026rdquo; post! (I hope.)\n","date":"2024-03-30T18:50:00+01:00","permalink":"https://haiiro.moe/p/al-rescorer/","title":"I made a tool to rescore your AL library!"},{"content":" # Hello again! As the title suggests, I come to you with a small guide to get you started with making your own VM! It is by no means a complete guide, as it will only cover what I personally had to go through to make things work, but it should be enough for those that have similar specs for their PC.\n# But why? A while ago I found out that one of the VR games I own got a major update that looked really promising. Problem was, I am running Linux, and it was not working with ALVR and Proton\u0026hellip; So, after a relatively long procrastination, I decided to just go for making a VM. Here comes problem number two: Steam Link! Since I have a Quest 2, I cannot just plug and play, I have to connect somewhere, and a regular VM with the default network just won\u0026rsquo;t do. The Steam app will not detect it! This is where the bridge networks came in clutch.\nIn short: I care about my privacy, and I was lazy to dualboot.\nAnyways, let\u0026rsquo;s get going!\n# The guide. Like I said at the beginning, this will only cover parts that I personally had to do. This means there will be no mention for NVIDIA! The process is roughly the same, except you will have to patch your GPU vBIOS.\n# Setting up your BIOS and GRUB First thing on our list is to enable all the virtualization tools. Which means, you have to enable Intel VT-d or AMD-Vi in your BIOS. If you don\u0026rsquo;t see these options, your computer likely doesn\u0026rsquo;t support virtualization, making the rest of the steps irrelevant.\nThen, we\u0026rsquo;ll need to enable IOMMU. To do that, you\u0026rsquo;ll need to edit /etc/default/grub like so:\n1 2 3 # ... GRUB_CMDLINE_LINUX_DEFAULT=\u0026#39;... amd_iommu=on iommu=pt ...\u0026#39; # ... For Intel CPUs, type intel_iommu instead of amd_iommu\nAnd now restart your computer. To check if things worked, use the dmesg | grep IOMMU commands (as root). You should see something like this:\n1 2 [ 0.324086] pci 0000:00:00.2: AMD-Vi: IOMMU performance counters supported [ 0.381785] perf/amd_iommu: Detected AMD IOMMU #0 (2 banks, 4 counters/bank). # Installing and setting up packages Great, you have virtualization enabled, and all your internals are ready to go. Time to set up your packages. I use Arch (btw), but the process is very similar on most systems, provided you don\u0026rsquo;t use something like SELinux, which I will not cover in this guide.\nArch Linux 1 pacman -S qemu libvirt edk2-ovmf virt-manager dnsmasq ebtables Fedora 1 dnf install @virtualization Ubuntu 1 apt install qemu-kvm qemu-utils libvirt-daemon-system libvirt-clients bridge-utils virt-manager ovmf After installing these packages, you have to enable some services:\nsystemd 1 systemctl enable --now libvirtd OpenRC 1 2 rc-update add libvirtd default rc-service libvirtd start You might need to force start your virtual network as well, you can do that by typing\n1 2 sudo virsh net-start default sudo virsh net-autostart default # Setting up the guest OS We\u0026rsquo;re getting closer, it\u0026rsquo;s time to install Windows. Get yourself a Windows ISO. Your first step is to make a new virtual machine using Virtual Machine Manager. Make sure to check \u0026ldquo;Customize configuration before install!\u0026rdquo; This is very important!\nIn the Overview section, set the VM\u0026rsquo;s chipset to Q35 (likely already the default), and the firmware to UEFI.\nThen, go to the CPUs section and set the configuration to host-passthrough (once again, this is likely the default), and set the topology to your liking. I set it to 1 socket, 5 cores and 2 threads for example.\nGo to the SATA Disk 1 section, and set it to Virtio. It will change to \u0026ldquo;Virtio Disk 1\u0026rdquo;. Do the same with your NIC!\nDownload the virtio-win ISO, and attach it as a CDROM device (Add Hardware \u0026gt; Storage \u0026gt; Device Type).\nYou can now hit \u0026ldquo;Begin Installation\u0026rdquo;! Go through the steps just like a normal Windows installation.\n# Attaching your devices After the Windows install is done, delete the Sound ich* and Channel (spice) devices, we will not need these anymore. Inside the Display Spice section, change the type to VNC server, and set the address to \u0026ldquo;All interfaces\u0026rdquo;. We will use this to connect to our VM to install the graphics drivers.\nAdd your GPU and the HDMI Audio PCI devices (Add Hardware \u0026gt; PCI Host Device). You can also add your USB host devices, we will not need them on the host anyways. Add your keyboard and mouse along with any other device you might need. I added my Bluetooth dongle for example. Your list should look something like this:\n# Making the hooks The fun part! To use our GPU for this VM, we have to unload everything that uses the GPU, along with the drivers.\n# Libvirt hook This is needed for libvirt to recognize our other hooks.\n1 2 3 sudo mkdir /etc/libvirt/hooks sudo touch /etc/libvirt/hooks/qemu sudo chmod +x /etc/libvirt/hooks/qemu The contents of /etc/libvirt/hooks/qemu:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/bin/bash GUEST_NAME=\u0026#34;$1\u0026#34; HOOK_NAME=\u0026#34;$2\u0026#34; STATE_NAME=\u0026#34;$3\u0026#34; MISC=\u0026#34;${@:4}\u0026#34; BASEDIR=\u0026#34;$(dirname $0)\u0026#34; HOOKPATH=\u0026#34;$BASEDIR/qemu.d/$GUEST_NAME/$HOOK_NAME/$STATE_NAME\u0026#34; set -e # If a script exits with an error, we should as well. if [ -f \u0026#34;$HOOKPATH\u0026#34; ]; then eval \\\u0026#34;\u0026#34;$HOOKPATH\u0026#34;\\\u0026#34; \u0026#34;$@\u0026#34; elif [ -d \u0026#34;$HOOKPATH\u0026#34; ]; then while read file; do eval \\\u0026#34;\u0026#34;$file\u0026#34;\\\u0026#34; \u0026#34;$@\u0026#34; done \u0026lt;\u0026lt;\u0026lt; \u0026#34;$(find -L \u0026#34;$HOOKPATH\u0026#34; -maxdepth 1 -type f -executable -print;)\u0026#34; fi # The start hook This is the script that gets executed when you start the VM. Make sure to replace win10 with your own VM\u0026rsquo;s name!\n1 2 3 sudo mkdir --parents /etc/libvirt/hooks/qemu.d/win10/prepare/begin sudo touch /etc/libvirt/hooks/qemu.d/win10/prepare/begin/start.sh sudo chmod +x /etc/libvirt/hooks/qemu.d/win10/prepare/begin/start.sh The contents of /etc/libvirt/hooks/qemu.d/win10/prepare/begin/start.sh:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/bin/bash set -x # Stop KDE Plasma # Comment this out if you\u0026#39;re not using Plasma! systemctl --user -M michiru@ stop plasma* # Stop display manager systemctl stop display-manager # Unbind VTconsoles: might not be needed echo 0 \u0026gt; /sys/class/vtconsole/vtcon0/bind echo 0 \u0026gt; /sys/class/vtconsole/vtcon1/bind # Unbind EFI Framebuffer echo efi-framebuffer.0 \u0026gt; /sys/bus/platform/drivers/efi-framebuffer/unbind # Unload AMD kernel module modprobe -r amdgpu # Detach GPU devices from host # Use your GPU and HDMI Audio PCI host device # You can check their addresses in virt-manager! virsh nodedev-detach pci_0000_03_00_0 virsh nodedev-detach pci_0000_03_00_1 virsh nodedev-detach pci_0000_0b_00_6 # My audio controller # Load vfio module modprobe vfio-pci # The release hook This is the script that gets executed when you stop the VM. Make sure to replace win10 with your own VM\u0026rsquo;s name!\n1 2 3 sudo mkdir --parents /etc/libvirt/hooks/qemu.d/win10/release/end sudo touch /etc/libvirt/hooks/qemu.d/win10/release/end/stop.sh sudo chmod +x /etc/libvirt/hooks/qemu.d/win10/release/end/stop.sh The contents of /etc/libvirt/hooks/qemu.d/win10/release/end/stop.sh:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/bin/bash set -x # Reattach GPU devices to host # Use your GPU and HDMI Audio PCI host device # You can check their addresses in virt-manager! virsh nodedev-reattach pci_0000_03_00_0 virsh nodedev-reattach pci_0000_03_00_1 virsh nodedev-reattach pci_0000_0b_00_6 # My audio controller # Unload vfio module modprobe -r vfio-pci # Load AMD kernel module modprobe amdgpu # Rebind framebuffer to host echo \u0026#34;efi-framebuffer.0\u0026#34; \u0026gt; /sys/bus/platform/drivers/efi-framebuffer/bind # Bind VTconsoles: might not be needed echo 1 \u0026gt; /sys/class/vtconsole/vtcon0/bind echo 1 \u0026gt; /sys/class/vtconsole/vtcon1/bind # Restart Display Manager systemctl start display-manager # Testing the scripts This is an optional step, but if these scripts don\u0026rsquo;t work you\u0026rsquo;ll either be stuck on a black screen until you reboot or your VM just won\u0026rsquo;t boot. Here\u0026rsquo;s how you test them:\nEnable SSH (systemctl enable --now sshd) Get a second computer and connect to your host To get your host computer\u0026rsquo;s IP, you can do ip a ssh username@youripaddress Execute the start/stop scripts sudo /etc/libvirt/hooks/qemu.d/win10/release/end/stop.sh sudo /etc/libvirt/hooks/qemu.d/win10/prepare/begin/start.sh # Audio passthrough Since we\u0026rsquo;re not going to need the host computer\u0026rsquo;s audio, we can just pass the PCI device through. Search for something like \u0026ldquo;HD Audio Controller\u0026rdquo;, or if you have a dedicated card for it, add that one. You could also use Scream, or PipeWire. If you pass it directly, make sure to edit the part marked by \u0026ldquo;My audio controller\u0026rdquo;. Otherwise, comment it out.\n# Virtualization detection For some reason cards don\u0026rsquo;t like it whenyou run them in a VM. Here\u0026rsquo;s how you get around this. Inside your VM\u0026rsquo;s settings, go to the Overview section, switch to the XML tab, and edit the VM like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ... \u0026lt;features\u0026gt; ... \u0026lt;hyperv\u0026gt; ... \u0026lt;vendor_id state=\u0026#39;on\u0026#39; value=\u0026#39;anything\u0026#39;/\u0026gt; ... \u0026lt;/hyperv\u0026gt; ... \u0026lt;kvm\u0026gt; \u0026lt;hidden state=\u0026#39;on\u0026#39;/\u0026gt; \u0026lt;/kvm\u0026gt; ... \u0026lt;/features\u0026gt; ... Hiding the KVM CPU isn\u0026rsquo;t necessary on AMD, but I added it just to be sure.\n# Getting the GPU vBIOS You could just dump it yourself if you know how to, but there are simpler ways, like just downloading the one you need for your card\u0026hellip;\nMake sure to get your card\u0026rsquo;s ROM! Check the brand, the vendor and the model!!\nAfter you got the vBIOS, name it something simple like gpu.rom, and move it to a folder where libvirt can see it. I did this:\n1 2 3 4 sudo mkdir --parents /var/lib/libvirt/vbios sudo mv /path/to/gpu.rom /var/lib/libvirt/vbios sudo chown $(id -u):$(id -g) -R /var/lib/libvirt/vbios sudo chmod 777 -R /var/lib/libvirt/vbios I got a strange error saying it can\u0026rsquo;t find the gpu.rom file when it had rwx permissions for everything, so I gave rwx permissions to everything in the folder, alongside the folder itself.\n# Giving the vBIOS to your VM In your VM settings, go to your GPU\u0026rsquo;s sections, the XML tab, and add this section to each one (the GPU and the HDMI audio controller):\n1 2 3 4 5 \u0026lt;hostdev mode=\u0026#34;subsystem\u0026#34; type=\u0026#34;pci\u0026#34; managed=\u0026#34;yes\u0026#34;\u0026gt; ... \u0026lt;rom file=\u0026#34;/var/lib/libvirt/vbios/gpu.rom\u0026#34;/\u0026gt; ... \u0026lt;/hostdev\u0026gt; Of course, change the path in file=\u0026quot;...\u0026quot; to your path.\n# The bridge network Here\u0026rsquo;s the part I needed to fix Steam Link not working. We need the VM to be on the same network, so we\u0026rsquo;ll need to make a bridge network. You will need NetworkManager for this.\n# Using Plasma\u0026rsquo;s System Settings Inside System Settings, go to the Network category and then Connections. Click on the + sign to add a new connection, and select Bridge under the \u0026ldquo;Virtual connections\u0026rdquo; category. You can name the connection anything you want. Give a name to the interface, this will be used for the VM. You will have to add an Ethernet connection to the bridged connections. After you added it, hit save. Now, delete your original Wired Ethernet connection. You won\u0026rsquo;t need this anymore, as the bridge connection will handle everything.\nDo not worry if you don\u0026rsquo;t have internet for a while after setting this up. If you did it right, it should take a while, but the new connection will set itself up again.\n# Using nmtui The process is the same, except it\u0026rsquo;s in the terminal using NetworkManager\u0026rsquo;s built-in TUI tool. The notable difference is in the main menu. To add a connection, you have to go into the \u0026ldquo;Edit a connection\u0026rdquo; menu. There are no categories, you just have to select \u0026ldquo;Bridge\u0026rdquo;.\n# The result # Setting the VM\u0026rsquo;s network Going back to our VM, go to the NIC section, and change the Network source to \u0026ldquo;Bridge device\u0026hellip;\u0026rdquo;. The device name should be automatically filled in, but if it\u0026rsquo;s not, just put in the name you gave to your interface.\n# That\u0026rsquo;s it! You\u0026rsquo;re done! If any issues arise, comment them and I\u0026rsquo;ll do my best to resolve them and edit the post accordingly. Have fun with your new VM!\n# Sources TechPowerUp VGA BIOS collection\nGitHub/Gitlab\nQaidVoid/Complete-Single-GPU-Passthrough\nmartinopiaggi/Single-GPU-Passthrough-for-Dummies\nrisingprismtv/single-gpu-passthrough\nYouTube\nCoodos - Windows 11 KVM Single GPU Passthrough\nAbstract programmer - qemu/kvm bridge and NAT networking\n","date":"2024-02-09T10:45:00+01:00","permalink":"https://haiiro.moe/p/kvm-passthrough-vr/","title":"I made a virtual machine for VR games."},{"content":" # Hello again! It wasn\u0026rsquo;t as long as I imagined between my last post and this one. Yeah, so this happened. Around a week or two ago I got contacted by a friend about a gameshow he\u0026rsquo;s hosting as an event on a Discord server we\u0026rsquo;re part of. He asked me if I could maybe make a website to display the questions he\u0026rsquo;s going to ask, along with the answers. I agreed after I was done with my exams, and made a dead simple site. Seriously, there\u0026rsquo;s nothing special about it.\nI used React with Vite, Typescript and Tailwind CSS for the main frameworks, and added nstate for easy state management, this way I didn\u0026rsquo;t have to do anything fancy just to store some basic data. Like I said, the site is really simple, all it does is display all the questions the person imports in a random order:\nThat\u0026rsquo;s it, really. It\u0026rsquo;s small like I said, but I think I will definitely put up all of my really small projects, since who knows who might find them, and maybe even make use of it. Small projects like this are keeping me interested and excited about coding, so I will definitely continue them. Check this project out on GitHub!\nYes, the title is Gayshow, and yes, I did not replace the default Vite favicon. It\u0026rsquo;s not what matters!! (Maybe next commit\u0026hellip;)\n","date":"2023-12-17T00:54:59+01:00","permalink":"https://haiiro.moe/p/morfin-gameshow/","title":"I made a site for a gameshow!"},{"content":" # Hello World. A new site! Woah!\nYeah, I decided to adopt Hugo. It\u0026rsquo;s easy to use, and I can write about things that might interest me. I\u0026rsquo;m not quite sure what it will be, and I might not even write anything at all. This is just something that\u0026rsquo;s nice to have. I will most likely only do some posts about some random code I wrote, or a bigger project I work on. We\u0026rsquo;ll see.\nThe theme is based on the Stack theme. I modified it to fit my black and white aesthetic.\n","date":"2023-11-19T10:30:00+01:00","image":"https://haiiro.moe/p/hello-world/cover_hu978925f72364cc4ea8a982fe3241670c_934112_120x120_fill_q75_box_smart1.jpg","permalink":"https://haiiro.moe/p/hello-world/","title":"Hello World"}]